plugins {
    id 'java'
    id 'org.spongepowered.plugin' version '2.2.0'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

// Java 8 for Sponge 1.12.2
java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

// ---- Resolve properties with safe defaults ----
def PG  = findProperty("pluginGroup")   ?: "co.nytro.market"
def PV  = findProperty("pluginVersion") ?: "0.1.1"
def PID = findProperty("pluginId")      ?: "market"

group = PG
version = PV

repositories {
    mavenCentral()
    maven { url 'https://repo.spongepowered.org/maven' }
    // only if you truly need snapshots:
    // maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

dependencies {
    // SpongeAPI is provided by the server
    compileOnly 'org.spongepowered:spongeapi:7.4.0'

    // Shade these into the jar
        implementation 'redis.clients:jedis:3.7.1'
        implementation 'org.apache.commons:commons-pool2:2.12.0'

        // MySQL JDBC driver (latest compatible with Java 8)
        implementation 'mysql:mysql-connector-java:8.0.33'
        // HikariCP for MySQL pooling
        implementation 'com.zaxxer:HikariCP:4.0.3'

    testImplementation 'junit:junit:4.13.2'
  }

sponge.plugin.id = PID

tasks.named('shadowJar') {
    // include the libs we want to shade
    dependencies {
        include(dependency('redis.clients:jedis'))
          include(dependency('org.apache.commons:commons-pool2'))
          include(dependency('mysql:mysql-connector-java'))
          include(dependency('com.zaxxer:HikariCP'))
      }

    // relocate shaded libs to avoid server conflicts
    relocate 'org.apache',     "${PG}.relocate.org.apache"
    relocate 'redis.clients',  "${PG}.relocate.redis.clients"
    relocate 'com.mysql',      "${PG}.relocate.com.mysql"

    archiveFileName.set("Market-${PV}.jar")
}

// Only build the shaded jar
tasks.build { dependsOn tasks.shadowJar }
tasks.jar  { enabled = false }

// disable metadata generation for testing to avoid plugin validation issues
tasks.named('generateMetadata').configure { enabled = false }
